*** Validation ***
  theare two parts of validation: user input validation on PL (Presentation layer) and business rules on Service Layer (BLL).
  there are several ways to implement validation process:
  - [Decoupling the Service Layer]: https://learn.microsoft.com/en-us/aspnet/mvc/overview/older-versions-1/models-data/validating-with-a-service-layer-cs#decoupling-the-service-layer and because model state is a part of runtime its necessary to
      - create controller without passing service to it
      - create service and pass controller's model state (as wrapper implemented IValidationDictionary) to it
      - inject service into product controller via DI mechanism
    BUT this method mixed two logic concerns: validation logic with the service logic
  - [Throwing custom exceptions]: BLL will throw an exception if service logic is violated.
    Exceptions are for exceptional cases only, and violating of business rules is exceptional case.

*** Posting data ***
    after POST (Edit action) it is possible to return to same page in two ways
    - return View(viewModel); - sends data from ModelState to View
      it brings to situation when checkboxes are stayed selected even if they are false in viewModel;
      it brings to situation when user refreshes page and send same Post request.
    - return RedirectToAction(nameof(Edit), formId)
      classical Post-Request-Get approach.

/* 
 * https://habr.com/ru/post/247373/
 * A tables in SQL are non sorted values located in a heap: that's why indexes (a way to fast data search):
 *  
 * Primary key -  automatically unique clastered index [ballanced-tree leafs contain row data]
 * Unique constraint - automat. unique non-clastered index [ballanced-tree leafs contain pointers to row data in heap]
 * 
 * Foreign key constraint - is used to prevent actions that would destroy links between tables 
 */


/* 
 * IEnumerable<T> (LINQ version for .NET)
 *  - for a list of objects that only needs to be iterated through(no aditional operations like modification).
 *  - is a special case, because it turns a collection into a read-only version, due to IEnumerable not having a Add or Remove method.
 *  - forward-only list of items. You can't get at "item 4" without passing items 0-3.
 *  
 *  - in Views even @Model.Count() (like foreach) will lead to request all items from DB (create objects) and iterating through them. SELECT SQL operator is using
 *  
 * IQueryable<T> (LINQ version for ENTITY FRAMEWORK)
 *  - query isn't executed until you really iterate over the items (.ToList() or foreach). Which means you still can add filters, like a Where()
 *  - extends IEnumerable
 *  
 *  - in Views will not lead to additional SQL requests. @Model.Count() wiil cause SELECT COUNT SQL operator (counting on DB side)
 * 
 * ICollection<T>
 *  - for a list of objects that needs to be iterated through and modified.
 *  - is between IEnumerable and IList
 *  - extends IEnumerable
 * 
 * IList<T>
 *  - for a list of objects that needs to be iterated through, modified, sorted, access by index...
 *  - random access to the full list
 *  - probably entirely in memory (no deferred execution, but who knows what the exact class does that implements this?)
 *  - extends IEnumerable and ICollection
*/